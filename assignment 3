#include <iostream>
using namespace std;

struct student
{
    int rollNo;
    string name;
    float sgpa;
};

class cstudent
{
public:
    student s[10];
    int count = 0;
    void getData();
    void displayData();
    void linearSearch();
    void binarySearch();
    void bubbleSort();
    void insertionSort();
    void quickSort();
};

void cstudent ::getData()
{
    cout << "How many students do you want to enter? ";
    cin >> count;

    if (count > 10)
    {
        cout << "Only 10 students allowed. Setting count to 10.\n";
        count = 10;
    }

    for (int i = 0; i < count; i++)
    {
        cout << "\nEnter roll number of student " << i + 1 << ": ";
        cin >> s[i].rollNo;

        cout << "Enter name of student " << i + 1 << ": ";
        cin >> s[i].name;

        cout << "Enter SGPA of " << s[i].name << ": ";
        cin >> s[i].sgpa;
    }
}

void cstudent ::displayData()
{
    if (count == 0)
    {
        cout << "No student data to display.\n";
        return;
    }

    for (int i = 0; i < count; i++)
    {
        cout << "\nStudent " << i + 1 << ":\n";
        cout << "Roll No: " << s[i].rollNo << endl;
        cout << "Name   : " << s[i].name << endl;
        cout << "SGPA   : " << s[i].sgpa << endl;
    }
}

// Linear search by SGPA
void cstudent ::linearSearch()
{
    if (count == 0)
    {
        cout << "No student data available\n";
        return;
    }

    float key;
    cout << "Enter SGPA to search: ";
    cin >> key;

    int flag = 0;
    for (int i = 0; i < count; i++)
    {
        if (s[i].sgpa == key)
        {
            cout << "\nStudent Found:\n";
            cout << "Roll No: " << s[i].rollNo << endl;
            cout << "Name   : " << s[i].name << endl;
            cout << "SGPA   : " << s[i].sgpa << endl;
            flag = 1;
        }
    }

    if (!flag)
    {
        cout << "No student found with SGPA " << key << endl;
    }
}
// Binary search by name
void cstudent::binarySearch()
{
    insertionSort();

    string key;
    cout << "Enter name to be searched: ";
    cin >> key;

    int start = 0;
    int end = count - 1;
    int flag = 0;

    while (start <= end)
    {
        int mid = (start + end) / 2;

        if (s[mid].name == key)
        {
            cout << "\nStudent Found:\n";
            cout << "Roll No: " << s[mid].rollNo << endl;
            cout << "Name   : " << s[mid].name << endl;
            cout << "SGPA   : " << s[mid].sgpa << endl;
            flag = 1;
            break;
        }
        else if (key < s[mid].name)
        {
            end = mid - 1;
        }
        else
        {
            start = mid + 1;
        }
    }

    if (!flag)
    {
        cout << "No student found with name " << key << endl;
    }
}

// Bubble Sort by roll number
void cstudent ::bubbleSort()
{
    for (int i = 0; i < count - 1; i++)
    {
        for (int j = 0; j < count - i - 1; j++)
        {
            if (s[j].rollNo > s[j + 1].rollNo)
            {
                swap(s[j], s[j + 1]);
            }
        }
    }
    displayData();
}
// Insertion Sort by name
void cstudent ::insertionSort()
{

    for (int i = 1; i < count; i++)
    {
        student key = s[i];
        int j = i - 1;
        while (j >= 0 && s[j].name > key.name)
        {
            s[j + 1] = s[j];
            j--;
        }
        s[j + 1] = key;
    }
    displayData();
}

// Quick Sort SGPA - Descending
void cstudent ::quickSort()
{

   int s = 0;
   int e = count - 1;
   while (s<e)
   {
        
   }
   
    displayData();
}


int main()
{
    int choice;
    cstudent c;

    do
    {
        cout << "\n--- MENU ---\n";
        cout << "1. Enter student data\n";
        cout << "2. Display student data \n";
        cout << "3. Search student by SGPA\n";
        cout << "4. Search student by name\n";
        cout << "5. Sort students according to there roll number\n";
        cout << "6. Sort students according to there name\n";
        cout << "7. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice)
        {
        case 1:
            c.getData();
            break;
        case 2:
            c.displayData();
            break;
        case 3:
            c.linearSearch();
            break;
        case 4:
            c.binarySearch();
            break;
        case 5:
            c.bubbleSort();
            break;
        case 6:
            c.insertionSort();
            break;
        case 7:
            cout << "Exited.\n";
            break;
        default:
            cout << "Invalid choice\n";
        }
    } while (choice != 7);

    return 0;
}
