#include <iostream>
using namespace std;

struct student
{
    int rollNo;
    string name;
    float sgpa;
};

class cstudent
{
public:
    student s[10];
    int count = 0;
    void getData();
    void displayData();
    void linearSearch();
    void binarySearch();
    void bubbleSort();
    void insertionSort();
    void quickSort();

private:
    int partition(int l, int h);
    void quickSortHelper(int l, int h);
};

// Input number of students
void cstudent::getData()
{
    cout << "How many students do you want to enter? ";
    cin >> count;

    if (count > 10)
    {
        cout << "Only 10 students allowed. Setting count to 10.\n";
        count = 10;
    }

    for (int i = 0; i < count; i++)
    {
        cout << "\nEnter roll number of student " << i + 1 << ": ";
        cin >> s[i].rollNo;
        cout << "Enter name of student " << i + 1 << ": ";
        cin >> s[i].name;
        cout << "Enter SGPA of " << s[i].name << ": ";
        cin >> s[i].sgpa;
    }
}

// Display students data
void cstudent::displayData()
{
    if (count == 0)
    {
        cout << "No student data to display.\n";
        return;
    }

    for (int i = 0; i < count; i++)
    {
        cout << "\nStudent " << i + 1 << ":\n";
        cout << "Roll No: " << s[i].rollNo << endl;
        cout << "Name   : " << s[i].name << endl;
        cout << "SGPA   : " << s[i].sgpa << endl;
    }
}

// Linear Search by SGPA
void cstudent::linearSearch()
{
    if (count == 0)
    {
        cout << "No student data available\n";
        return;
    }

    float key;
    cout << "Enter SGPA to search: ";
    cin >> key;

    int flag = 0;
    for (int i = 0; i < count; i++)
    {
        if (s[i].sgpa == key)
        {
            cout << "\nStudent Found:\n";
            cout << "Roll No: " << s[i].rollNo << endl;
            cout << "Name   : " << s[i].name << endl;
            cout << "SGPA   : " << s[i].sgpa << endl;
            flag = 1;
        }
    }

    if (!flag)
    {
        cout << "No student found with SGPA " << key << endl;
    }
}

// Binary Search by name
void cstudent::binarySearch()
{
    insertionSort();

    string key;
    cout << "Enter name to be searched: ";
    cin >> key;

    int start = 0;
    int end = count - 1;
    int flag = 0;

    while (start <= end)
    {
        int mid = (start + end) / 2;

        if (s[mid].name == key)
        {
            cout << "\nStudent Found:\n";
            cout << "Roll No: " << s[mid].rollNo << endl;
            cout << "Name   : " << s[mid].name << endl;
            cout << "SGPA   : " << s[mid].sgpa << endl;
            flag = 1;
            break;
        }
        else if (key < s[mid].name)
        {
            end = mid - 1;
        }
        else
        {
            start = mid + 1;
        }
    }

    if (!flag)
    {
        cout << "No student found with name " << key << endl;
    }
}

// Bubble Sort by Roll Number
void cstudent::bubbleSort()
{
    for (int i = 0; i < count - 1; i++)
    {
        for (int j = 0; j < count - i - 1; j++)
        {
            if (s[j].rollNo > s[j + 1].rollNo)
            {
                swap(s[j], s[j + 1]);
            }
        }
    }
    displayData();
}

// Insertion Sort by Name
void cstudent::insertionSort()
{
    for (int i = 1; i < count; i++)
    {
        student key = s[i];
        int j = i - 1;
        while (j >= 0 && s[j].name > key.name)
        {
            s[j + 1] = s[j];
            j--;
        }
        s[j + 1] = key;
    }
   
}

// Partition for Quick Sort (SGPA Descending)
int cstudent::partition(int l, int h)
{
    float pivot = s[l].sgpa;
    int i = l;
    int j = h;

    while (i < j)
    {
        while (s[i].sgpa >= pivot && i < h)
            i++;
        while (s[j].sgpa < pivot)
            j--;
        if (i < j)
            swap(s[i], s[j]);
    }
    swap(s[l], s[j]);
    return j;
}

// Recursive Quick Sort
void cstudent::quickSortHelper(int l, int h)
{
    if (l < h)
    {
        int p = partition(l, h);
        quickSortHelper(l, p - 1);
        quickSortHelper(p + 1, h);
    }
}

void cstudent::quickSort()
{
    quickSortHelper(0, count - 1);
    cout << "\nStudents sorted by SGPA (Descending):\n";
    displayData();
}

int main()
{
    int choice;
    cstudent c;

    do
    {
        cout << "\n--- MENU ---\n";
        cout << "1. Enter student data\n";
        cout << "2. Display student data \n";
        cout << "3. Search student by SGPA\n";
        cout << "4. Search student by name\n";
        cout << "5. Sort students according to their roll number\n";
        cout << "6. Sort students according to their name\n";
        cout << "7. Sort students by SGPA (Descending)\n";
        cout << "8. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice)
        {
        case 1:
            c.getData();
            break;
        case 2:
            c.displayData();
            break;
        case 3:
            c.linearSearch();
            break;
        case 4:
            c.binarySearch();
            break;
        case 5:
            c.bubbleSort();
            break;
        case 6:
            c.insertionSort();
            c.displayData();
            break;
        case 7:
            c.quickSort();
            break;
        case 8:
            cout << "Exited.\n";
            break;
        default:
            cout << "Invalid choice\n";
        }
    } while (choice != 8);

    return 0;
}
