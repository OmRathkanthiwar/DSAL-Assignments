#include <fstream>
#include <iostream>
#include <string>
#include <sstream>
#include <limits>
using namespace std;

#define Max_limit 80

struct Student_info
{
    int roll_no;
    string name;
    float marks;
};

class Student
{
public:
    Student_info record;
    static int count;
    fstream newfile;

    Student();

    void create();
    void add();
    void display();
    void search();
    void clear();
    void modify();
};

int Student::count = 1;

Student::Student()
{
    create();
    clear();
}

void Student::create()
{
    newfile.open("sample.txt", ios::in);
    if (!newfile)
    {
        newfile.open("sample.txt", ios::out);
        newfile << "Sr.No.\tName\t\tRoll no.\tMarks" << endl;
        newfile.close();
    }
    else
    {
        newfile.close();
    }
}

void Student::add()
{
    cin.ignore();
    cout << "Enter name: ";
    getline(cin, record.name);
    cout << "Enter roll no: ";
    cin >> record.roll_no;
    cout << "Enter marks: ";
    cin >> record.marks;
    newfile.open("sample.txt", ios::app);
    if (!newfile)
        return;
    newfile << count << "\t" << record.name << "\t\t" << record.roll_no << "\t\t" << record.marks << endl;
    count++;
    newfile.close();
}

void Student::display()
{
    newfile.open("sample.txt", ios::in);
    if (!newfile)
        return;
    string line;
    while (getline(newfile, line))
        cout << line << endl;
    newfile.close();
}

void Student::search()
{
    int search_roll;
    cout << "Enter roll number to search: ";
    cin >> search_roll;
    newfile.open("sample.txt", ios::in);
    if (!newfile)
        return;
    string line;
    bool found = false;
    getline(newfile, line);
    while (getline(newfile, line))
    {
        istringstream iss(line);
        int sr, roll;
        string name;
        float marks;
        if (!(iss >> sr >> name >> roll >> marks))
            continue;
        if (roll == search_roll)
        {
            cout << "Record found:\n";
            cout << "Sr No: " << sr << ", Name: " << name << ", Roll: " << roll << ", Marks: " << marks << endl;
            found = true;
            break;
        }
    }
    if (!found)
        cout << "Record not found." << endl;
    newfile.close();
}

void Student::clear()
{
    newfile.open("sample.txt", ios::out | ios::trunc);
    newfile << "Sr.No.\tName\t\tRoll no.\tMarks" << endl;
    newfile.close();
    count = 1;
    cout << "File cleared successfully.\n";
}

void Student::modify()
{
    int roll;
    cout << "Enter roll number to modify: ";
    cin >> roll;
    newfile.open("sample.txt", ios::in);
    if (!newfile)
        return;
    ofstream temp("temp.txt");
    string line;
    bool found = false;
    getline(newfile, line);
    temp << line << endl;
    while (getline(newfile, line))
    {
        istringstream iss(line);
        int sr, r;
        string name;
        float marks;
        if (!(iss >> sr >> name >> r >> marks))
            continue;
        if (r == roll)
        {
            cin.ignore();
            cout << "Enter new name: ";
            getline(cin, name);
            cout << "Enter new marks: ";
            cin >> marks;
            temp << sr << "\t" << name << "\t\t" << r << "\t\t" << marks << endl;
            found = true;
        }
        else
            temp << line << endl;
    }
    newfile.close();
    temp.close();
    remove("sample.txt");
    rename("temp.txt", "sample.txt");
    if (found)
        cout << "Record modified successfully.\n";
    else
        cout << "Record not found.\n";
}

int main()
{
    Student S;
    int choice;
    do
    {
        cout << "\n--- MENU ---\n";
        cout << "1. Create file\n";
        cout << "2. Add member in file\n";
        cout << "3. Display\n";
        cout << "4. Search\n";
        cout << "5. Clear\n";
        cout << "6. Modify\n";
        cout << "7. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;
        switch (choice)
        {
        case 1:
            S.create();
            break;
        case 2:
            S.add();
            break;
        case 3:
            S.display();
            break;
        case 4:
            S.search();
            break;
        case 5:
            S.clear();
            break;
        case 6:
            S.modify();
            break;
        case 7:
            cout << "Exiting program..." << endl;
            break;
        default:
            cout << "Invalid Choice. Try again!" << endl;
        }
    } while (choice != 7);
    return 0;
}
