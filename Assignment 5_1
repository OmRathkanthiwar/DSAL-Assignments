#include <iostream>
using namespace std;

struct Element
{
    int value;
    int priority;
};

class PriorityQueue
{
private:
    Element arr[100];
    int size;

    void bubbleSort(Element temp[], int n);

public:
    PriorityQueue();

    void insert();
    void peek();
    void extractMax();
    void display();
};

// Constructor
PriorityQueue::PriorityQueue()
{
    size = 0;
}

void PriorityQueue::bubbleSort(Element temp[], int n)
{
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = 0; j < n - i - 1; j++)
        {
            if (temp[j].priority < temp[j + 1].priority)
            {
                Element swap = temp[j];
                temp[j] = temp[j + 1];
                temp[j + 1] = swap;
            }
        }
    }
}

// Insert element
void PriorityQueue::insert()
{
    if (size == 100)
    {
        cout << "Queue overflow!" << endl;
        return;
    }
    Element e;
    cout << "Enter value: ";
    cin >> e.value;
    cout << "Enter priority: ";
    cin >> e.priority;
    arr[size++] = e;
}

// Peek element with highest priority
void PriorityQueue::peek()
{
    if (size == 0)
    {
        cout << "Queue is empty!" << endl;
        return;
    }
    Element temp[100];
    for (int i = 0; i < size; i++)
        temp[i] = arr[i];
    bubbleSort(temp, size);

    cout << "Element with highest priority: "
         << temp[0].value << " (Priority: " << temp[0].priority << ")" << endl;
}

// Extract element with highest priority
void PriorityQueue::extractMax()
{
    if (size == 0)
    {
        cout << "Queue is empty!" << endl;
        return;
    }
    Element temp[100];
    for (int i = 0; i < size; i++)
        temp[i] = arr[i];
    bubbleSort(temp, size);

    Element maxElem = temp[0];
    cout << "Extracted: " << maxElem.value
         << " (Priority: " << maxElem.priority << ")" << endl;

    // remove from original queue
    int index = -1;
    for (int i = 0; i < size; i++)
    {
        if (arr[i].value == maxElem.value && arr[i].priority == maxElem.priority)
        {
            index = i;
            break;
        }
    }
    if (index != -1)
    {
        for (int i = index; i < size - 1; i++)
            arr[i] = arr[i + 1];
        size--;
    }
}

// Display elements in insertion order
void PriorityQueue::display()
{
    if (size == 0)
    {
        cout << "Queue is empty!" << endl;
        return;
    }
    cout << "Priority Queue (in insertion order): ";
    for (int i = 0; i < size; i++)
    {
        cout << arr[i].value << "(" << arr[i].priority << ") ";
    }
    cout << endl;
}

int main()
{
    PriorityQueue pq;
    int choice;
    do
    {
        cout << endl
             << "--- Priority Queue Menu ---" << endl;
        cout << "1. Insert" << endl;
        cout << "2. Peek (Highest Priority)" << endl;
        cout << "3. Extract Max (Remove Highest Priority)" << endl;
        cout << "4. Display (Insertion Order)" << endl;
        cout << "5. Exit" << endl;
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice)
        {
        case 1:
            pq.insert();
            break;
        case 2:
            pq.peek();
            break;
        case 3:
            pq.extractMax();
            break;
        case 4:
            pq.display();
            break;
        case 5:
            cout << "Exited the program" << endl;
            break;
        default:
            cout << "Invalid choice!" << endl;
        }
    } while (choice != 5);

    return 0;
}
