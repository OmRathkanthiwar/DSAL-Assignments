#include <iostream>
using namespace std;

enum Priority
{
    OPD,
    ACCIDENT,
    EMERGENCY
};

struct Patient
{
    string name;
    Priority priority;
};

class Hospital
{
private:
    Patient arr[100];
    int front;
    int rear;
    int size;

public:
    Hospital();
    void insertionSort();
    void insert();
    void dequeue();
    void display();
};

// Constructor
Hospital::Hospital()
{
    front = -1;
    rear = -1;
    size = 0;
}

void Hospital::insertionSort()
{
    for (int i = 1; i < size; i++)
    {
        Patient key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j].priority > key.priority)
        {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

// Insert Patient
void Hospital::insert()
{
    if (size == 100)
    {
        cout << "Hospital is full !" << endl;
        return;
    }
    Patient e;
    int p;
    cout << "Enter name: ";
    cin >> e.name;
    cout << "Enter priority (1 = OPD, 2 = Accident, 3 = Emergency): ";
    cin >> p;
    e.priority = static_cast<Priority>(p);
    arr[size++] = e;
    rear++;
    insertionSort();
}

// Extract Patient with highest priority
void Hospital::dequeue()
{
    insertionSort();
    if (front == -1)
    {
        cout << "Queue is empty!" << endl;
        return;
    }
    else
    {
        front++;
    }
    display();
}

// Display Patients
void Hospital::display()
{
    insertionSort();
    if (size == 0)
    {
        cout << "Hospital is empty!" << endl;
        return;
    }
    cout << "Patients : ";
    for (int i = front; i <= rear; i++)
    {
        cout << arr[i].name << "(" << arr[i].priority << ") ";
    }
    cout << endl;
}

int main()
{
    Hospital h;
    int choice;
    do
    {
        cout << endl
             << "--- Hospital ---" << endl;
        cout << "1. Insert" << endl;
        cout << "2. Remove Highest Priority Patient" << endl;
        cout << "3. Display Patients" << endl;
        cout << "4. Exit" << endl;
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice)
        {
        case 1:
            h.insert();
            break;
        case 2:
            h.dequeue();
            break;
        case 3:
            h.display();
            break;
        case 4:
            cout << "Exited the program" << endl;
            break;
        default:
            cout << "Invalid choice!" << endl;
        }
    } while (choice != 4);

    return 0;
}
